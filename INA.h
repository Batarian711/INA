/*******************************************************************************************************************
** Class definition header for the INA class. This library allows access to the INA219 and INA226 High-Side or    **
** Low-Side Measurement, Bi-Directional Current and Power Monitor with I2C Compatible Interface. The datasheets   **
** can be downloaded from Texas Instruments at http://www.ti.com/lit/ds/symlink/INA219.pdf and from               **
** http://www.ti.com/lit/ds/symlink/INA226.pdf. While there are breakout boards for the INA219 along with sample  **
** libraries, I had a need for a device that would take over 28V and found that this chip could not only handle   **
** the higher voltage but was also significantly more accurate. Since the functionality is almost the same, a     **
** common library that handles both chips was needed.                                                             **
**                                                                                                                **
** Detailed documentation can be found on the GitHub Wiki pages at https://github.com/SV-Zanshin/INA/wiki         **
**                                                                                                                **
** The INA chips require an external shunt of known resistance to be placed across the high-side or low-side      **
** supply or ground line and it uses the small current generated by the shunt to compute the amperage going       **
** through the circuit.  This value, coupled with the voltage measurement, allows the Amperage and Wattage to be  **
** computed by the INA device and all of these values can be read using the industry standard I2C protocol.       **
**                                                                                                                **
** Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated   **
** documentation files (the "Software"), to deal in the Software without restriction, including without limitation**
** the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,   **
** and to permit persons to whom the Software is furnished to do so, subject to the following conditions:         **
** The above copyright notice and this permission notice shall be included in all copies or substantial portions  **
** of the Software.                                                                                               **
**                                                                                                                **
** Although programming for the Arduino and in c/c++ is new to me, I'm a professional programmer and have learned,**
** over the years, that it is much easier to ignore superfluous comments than it is to decipher non-existent ones;**
** so both my comments and variable names tend to be verbose. The code is written to fit in the first 80 spaces   **
** and the comments start after that and go to column 117 - allowing the code to be printed in A4 landscape mode. **
**                                                                                                                **
** This program is free software: you can redistribute it and/or modify it under the terms of the GNU General     **
** Public License as published by the Free Software Foundation, either version 3 of the License, or (at your      **
** option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY     **
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   **
** GNU General Public License for more details. You should have received a copy of the GNU General Public License **
** along with this program.  If not, see <http://www.gnu.org/licenses/>.                                          **
**                                                                                                                **
** Vers.  Date       Developer                     Comments                                                       **
** ====== ========== ============================= ============================================================== **
** 1.0.0  2018-06-10 https://github.com/SV-Zanshin Initial coding began                                           **
**                                                                                                                **
*******************************************************************************************************************/
#include "Arduino.h"                                                          // Arduino data type definitions    //
#ifndef INA_Class_h                                                           // Guard code definition            //
  #define debug_Mode                                                          // Comment out when not needed      //
  #define INA__Class_h                                                        // Define the name inside guard code//
  /*****************************************************************************************************************
  ** Declare structures and enumerated types used in the class                                                    **
  *****************************************************************************************************************/
  typedef struct {                                                            // Structure of values per device   //
    uint8_t  address;                                                         // I2C Address of device            //
    uint8_t  type;                                                            // see enumerated "ina_Type"        //
    uint16_t calibration;                                                     // Calibration register value       //
    uint16_t shuntVoltage_LSB;                                                // Device dependent LSB factor      //
    uint16_t busVoltage_LSB;                                                  // Device dependent LSB factor      //
    uint32_t current_LSB;                                                     // Amperage LSB                     //
    uint32_t power_LSB;                                                       // Wattage LSB                      //
    uint8_t  programmableGain;                                                // Only on some devices             //
    uint8_t  operatingMode;                                                   // Default continuous mode operation//
  } inaDet; // of structure                                                   //                                  //
  enum ina_Type { INA209,                                                     // TSSOP-16, multiple gain          //
                  INA219,                                                     // SOT-23, multiple gain            //
                  INA220,                                                     // VSSOP-10, multiple gain          //
                  INA226,                                                     // VSSOP-10                         //
                  INA230,                                                     // QFN-16                           //
                  INA231,                                                     // DSBGA-12                         //
                  INA233,                                                     // VSSOP-10                         //
                  INA250,                                                     // TSSOP-16, integrated shunt       //
                  INA253,                                                     // TSSOP-20, integrated shunt       //
                  INA260,                                                     // TSSOP-16, integrated shunt       //
                  INA3221,                                                    // VQFN-16                          //
                  UNKNOWN };                                                  //                                  //
  /*****************************************************************************************************************
  ** Declare constants used in the class                                                                          **
  *****************************************************************************************************************/
  const uint8_t  I2C_DELAY                    =     10;                       // Microsecond delay on write       //
  const uint8_t  INA_CONFIGURATION_REGISTER   =      0;                       // Registers common to all INAs     //
  const uint8_t  INA_SHUNT_VOLTAGE_REGISTER   =      1;                       //                                  //
  const uint8_t  INA_BUS_VOLTAGE_REGISTER     =      2;                       //                                  //
  const uint8_t  INA_POWER_REGISTER           =      3;                       //                                  //
  const uint8_t  INA_CURRENT_REGISTER         =      4;                       //                                  //
  const uint8_t  INA_CALIBRATION_REGISTER     =      5;                       //                                  //
  const uint8_t  INA_MASK_ENABLE_REGISTER     =      6;                       // Not found on all devices         //
  const uint8_t  INA_ALERT_LIMIT_REGISTER     =      7;                       // Not found on all devices         //
  const uint8_t  INA_MANUFACTURER_ID_REGISTER =   0xFE;                       // Not found on all devices         //
  const uint8_t  INA_DIE_ID_REGISTER          =   0xFF;                       // Not found on all devices         //
  const uint8_t  INA_BRNG_BIT                 =     13;                       // Bit for BRNG in config register  //
  const uint16_t  INA_CONFIG_PG_MASK          = 0xE7FF;                       // Bits 11-12                       //
  const uint8_t  INA_PG_FIRST_BIT             =     11;
  const uint16_t INA226_DIE_ID_VALUE          = 0x2260;


  const uint16_t INA_RESET_DEVICE             = 0x8000;                       // Write to configuration to reset  //
                                                                              //==================================//
                                                                              // Device-specific values           //
                                                                              //==================================//
  const uint16_t INA219_BUS_VOLTAGE_LSB       =    400;                       // LSB in uV *100 4.00mV            //
  const uint16_t INA226_BUS_VOLTAGE_LSB       =    125;                       // LSB in uV *100 1.25mV            //
  const uint16_t INA219_SHUNT_VOLTAGE_LSB     =    100;                       // LSB in uV *10  10.0uV            //
  const uint16_t INA226_SHUNT_VOLTAGE_LSB     =     25;                       // LSB in uV *10  2.5uV             //
  const uint16_t INA219_CONFIG_AVG_MASK       = 0x0780;                       // Bits 7-10                        //
  const uint16_t INA226_CONFIG_AVG_MASK       = 0x0E00;                       // Bits 9-11                        //
                                                                              //==================================//
  const uint16_t INA_CONFIG_BUS_TIME_MASK     = 0x01C0;                       // Bits 6-8                         //
  const uint16_t INA_CONFIG_SHUNT_TIME_MASK   = 0x0038;                       // Bits 3-5                         //
  const uint16_t INA_CONVERSION_READY_MASK    = 0x0080;                       // Bit 4                            //
  const uint16_t INA_CONFIG_MODE_MASK         = 0x0007;                       // Bits 0-3                         //
  const uint8_t  INA_MODE_TRIGGERED_SHUNT     =   B001;                       // Triggered shunt, no bus          //
  const uint8_t  INA_MODE_TRIGGERED_BUS       =   B010;                       // Triggered bus, no shunt          //
  const uint8_t  INA_MODE_TRIGGERED_BOTH      =   B011;                       // Triggered bus and shunt          //
  const uint8_t  INA_MODE_POWER_DOWN          =   B100;                       // shutdown or power-down           //
  const uint8_t  INA_MODE_CONTINUOUS_SHUNT    =   B101;                       // Continuous shunt, no bus         //
  const uint8_t  INA_MODE_CONTINUOUS_BUS      =   B110;                       // Continuous bus, no shunt         //
  const uint8_t  INA_MODE_CONTINUOUS_BOTH     =   B111;                       // Both continuous, default value   //
  /*****************************************************************************************************************
  ** Declare class header                                                                                         **
  *****************************************************************************************************************/
  class INA_Class {                                                           // Class definition                 //
    public:                                                                   // Publicly visible methods         //
      INA_Class();                                                            // Class constructor                //
      ~INA_Class();                                                           // Class destructor                 //
      uint8_t  begin(const uint8_t  maxBusAmps,                               // Class initializer                //
                     const uint32_t microOhmR,                                //                                  //
                     const uint8_t  deviceNumber = UINT8_MAX );               //                                  //
      uint16_t getBusMilliVolts(const bool waitSwitch=false,                  // Retrieve Bus voltage in mV       //
                                const uint8_t deviceNumber=0);                //                                  //
      int32_t  getShuntMicroVolts(const bool waitSwitch=false,                // Retrieve Shunt voltage in uV     //
                                  const uint8_t deviceNumber=0);              //                                  //
      int32_t  getBusMicroAmps(const uint8_t deviceNumber=0);                 // Retrieve micro-amps              //
      int32_t  getBusMicroWatts(const uint8_t deviceNumber=0);                // Retrieve micro-watts             //
      uint8_t  getDeviceType(const uint8_t deviceNumber=0);                   // Retrieve device type             //
      void     reset(const uint8_t deviceNumber=0);                           // Reset the device                 //
      void     setMode(const uint8_t mode,const uint8_t devNumber=UINT8_MAX); // Set the monitoring mode          //
      uint8_t  getMode(const uint8_t devNumber=UINT8_MAX);                    // Get the monitoring mode          //
      void     setAveraging(const uint16_t averages,                          // Set the number of averages taken //
                            const uint8_t deviceNumber=UINT8_MAX);            //                                  //
      void     setBusConversion(uint8_t convTime,                             // Set timing for Bus conversions   //
                                const uint8_t deviceNumber=UINT8_MAX);        //                                  //
      void     setShuntConversion(uint8_t convTime,                           // Set timing for Shunt conversions //
                                  const uint8_t deviceNumber=UINT8_MAX);      //                                  //
      void     waitForConversion(const uint8_t deviceNumber=UINT8_MAX);       // wait for conversion to complete  //
      void     setAlertPinOnConversion(const bool alertState,                 // Enable pin change on conversion  //
                                       const uint8_t deviceNumber=UINT8_MAX); //                                  //
    private:                                                                  // Private variables and methods    //
      uint8_t  readByte(const uint8_t addr, const uint8_t deviceAddress);     // Read a byte from an I2C address  //
      int16_t  readWord(const uint8_t addr, const uint8_t deviceAddress);     // Read a word from an I2C address  //
      void     writeByte(const uint8_t addr, const uint8_t data,              // Write a byte to an I2C address   //
                         const uint8_t deviceAddress);                        //                                  //
      void     writeWord(const uint8_t addr, const uint16_t data,             // Write two bytes to an I2C address//
                         const uint8_t deviceAddress);                        //                                  //
      uint8_t  _TransmissionStatus = 0;                                       // Return code for I2C transmission //
      uint8_t  _DeviceCount        = 0;                                       // Number of INAs detected          //
  }; // of INA_Class definition                                               //                                  //
#endif                                                                        //----------------------------------//
